name: Test

on: [push, workflow_dispatch]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - run: ls -R
        name: List all files for debugging

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - uses: actions/setup-node@v3
        with:
          node-version: 19

      # Restore your project dependencies
      - name: Restore dependencies
        run: dotnet restore ecommerce/ecommerce.sln

      # Build the entire solution
      - name: Build the solution
        run: dotnet build ecommerce/ecommerce.sln --no-restore

      # Run tests and generate NUnit XML results
      - name: Run tests
        run: dotnet test ecommerce.nunit/<correct-path-to-csproj>.csproj --no-build --logger "nunit;LogFileName=results/test-results.xml"
        continue-on-error: true

      # Install Testmo CLI tool locally (then use npx testmo to run it)
      - run: npm install --no-save @testmo/testmo-cli

      # Optionally add a couple of fields such as the git hash and link to the build
      - run: |
          npx testmo automation:resources:add-field --name git --type string \
            --value ${GITHUB_SHA:0:7} --resources resources.json
          RUN_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          npx testmo automation:resources:add-link --name build \
            --url $RUN_URL --resources resources.json

      # Run automated tests and report results to Testmo
      - run: |
          npx testmo automation:run:submit \
            --instance "$TESTMO_URL" \
            --project-id 1 \
            --name "Test run" \
            --source "frontend" \
            --resources resources.json \
            --results results/test-results.xml \
            -- echo "Tests Completed"
        env:
          TESTMO_URL: ${{ secrets.TESTMO_URL }}
          TESTMO_TOKEN: ${{ secrets.TESTMO_TOKEN }}
